package com.gme.hom.kyc.merchants.services;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.gme.hom.GlobalConfig;
import com.gme.hom.documents.services.DocumentServiceImpl;
import com.gme.hom.kyc.merchants.model.Merchant;
import com.gme.hom.kyc.merchants.model.MerchantDTO;
import com.gme.hom.kyc.merchants.model.MerchantRequest;
import com.gme.hom.kyc.merchants.repositories.MerchantRepository;
import com.gme.hom.security.services.ChecksumService;
import com.gme.hom.usersecurity.services.UserSecurityService;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class MerchantServiceImpl implements MerchantService {
	@Autowired
	MerchantRepository merchantRepo;
	
	private static final Logger logger = LoggerFactory.getLogger(DocumentServiceImpl.class);


	@Override
	public Merchant save(Merchant merchant) throws NoSuchAlgorithmException, IOException {
		merchant.setCreatedBy(UserSecurityService.getUsername());
		logger.debug("merchant service save...");
		merchant.setEntityHash(ChecksumService.getChecksum(merchant, GlobalConfig.DATA_ENTITY_HASH));
		return merchantRepo.save(merchant);
	}

	@Override
	public Optional<Merchant> getById(long id) {
		Optional<Merchant> merchant = merchantRepo.findById(id);
		return merchant;
	}

	@Override
	public Optional<Merchant> getMerchantByEmailId(String email) {
		return merchantRepo.findByEmailId(email);
	}

	@Override
	public Merchant update(Merchant merchant) {
		merchant.setUpdatedBy(UserSecurityService.getUsername());
		return merchantRepo.save(merchant);
	}

	@Override
	public List<Merchant> getAllMerchants() {
		return merchantRepo.findAll();
	}
	
	@Override
	public Page<Merchant> getAllMerchants(PageRequest pageRequest) {
		return merchantRepo.findAll(pageRequest);
	}

	@Override
	public Merchant addMerchant(Merchant merchant) {
		return merchantRepo.save(merchant);
	}
	
	@Override
	public boolean merchantAlreadyExixts( String email ) {
		return !merchantRepo.findByEmailId(email).isEmpty();
	}

	@Override
	public boolean phoneNumberAlreadyRegistered(String phoneNumber) {
		return !merchantRepo.findByPhoneNumber(phoneNumber).isEmpty();
	}



}
