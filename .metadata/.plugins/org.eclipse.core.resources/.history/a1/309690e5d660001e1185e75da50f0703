package com.gme.hom.merchants.signup.models;


import static jakarta.persistence.GenerationType.SEQUENCE;

import java.util.UUID;


import com.gme.hom.common.models.PersistenceEntity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
@Getter
@Setter
@Entity(name="Users_signup")
@Table(name="users_signup")
public class UserSignup extends PersistenceEntity {
	
	@Id
	@SequenceGenerator(name = "users_signup_id_seq", sequenceName = "users_signup_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = SEQUENCE, generator="users_signup_id_seq")
	@Column(name="id", nullable = false)
    protected long id;

	//@GenericGenerator(name = "uuid2", strategy = "uuid2")
	//@GeneratedValue(strategy = GenerationType.IDENTITY, generator = "uuid2")
    @Column(name="user_signup_id", updatable = false)
    protected UUID userSignupId;

    @Column(name="merchant_type", nullable = false, updatable = false)
    protected String merchantType;

    @Column(name="incorporation_country", nullable = false, updatable = false)
    protected String incorporationCountry;

    @Column(name="email_id", nullable = false, updatable = false)
    protected String emailId;

    @Column(name="phone_code", updatable = false)
    protected String phoneCode;

    @Column(name="phone_number", updatable = false)
    protected String phoneNumber;

    @Column(name="is_email_otp_verified")
    protected boolean isEmailOtpVerified;

    @Column(name="is_sms_otp_verified")
    protected boolean isSmsOtpVerified;

    @Column(name="status")
    protected String status;

    @Column(name="ip_address")
    protected String ipAddress;

    @Column(name="signup_source")
    protected String signupSource;

    @Column(name="entity_hash")
    protected String entityHash;

    public UserSignup() {
		super();
	}

	public UserSignup(UserSignupRequest userSignupRequest) {
        this.userSignupId = userSignupRequest.getUserSignupId();
        this.merchantType = userSignupRequest.getMerchantType();
        this.incorporationCountry = userSignupRequest.getIncorporationCountry();
        this.emailId = userSignupRequest.getEmailId();
        this.phoneCode = userSignupRequest.getPhoneCode();
        this.phoneNumber = userSignupRequest.getPhoneNumber();
        this.isEmailOtpVerified = userSignupRequest.isEmailOtpVerified();
        this.isSmsOtpVerified = userSignupRequest.isSmsOtpVerified();
        this.status = userSignupRequest.getStatus();
        this.ipAddress = userSignupRequest.getIpAddress();
        this.signupSource = userSignupRequest.getSignupSource();
    } 
}

