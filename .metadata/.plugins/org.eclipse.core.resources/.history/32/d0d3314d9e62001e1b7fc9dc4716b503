package com.gme.hom.kyc.merchants.repositories;

import org.springframework.stereotype.Repository;

import com.gme.hom.kyc.merchants.model.MerchantLog;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;

@Repository
public class MerchantLogSaveRepo {
	@PersistenceContext
	private EntityManager entityManager;
	
	@Transactional
	public Long save(MerchantLog m) {
	    return (long) entityManager.createNativeQuery("INSERT INTO merchants_log ("
	    												+ "id, merchant_id, merchant_type, email_id,"
	    												+ "phone_code, phone_number, incorporation_country, "
	    												+ "business_name, business_name_native, business_type,industry_type, product_type, business_nature, "
	    												+ "incorporation_date, bizz_reg_no, corp_reg_no, business_profile, "
	    												+ "postal_code, address1, address2, city, website, currency_preference, "
	    												+ "approx_txn_monthly_volume, approx_txn_yearly_volume,"
	    												+ "kyc_status, kyc_remarks,"
	    												+ "rba_status, rba_remarks,"
	    												+ "compliance_status, compliance_remarks,"
	    												+ "doc_path, notification_method, "
	    												+ "preferred_date_format, preferred_time_zone, "
	    												+ "security_stamp, terms_conditions_accepted, privacy_policy_accepted, pricing_policy_accepted, marketing_email_subscription"
	    												+ "status, is_active, remarks, ext_map_id_1, ext_map_id_2, ext_map_id_3, ref_col_1, ref_col_2, ref_col_3, ref_col_4, ref_col_5, entity_hash"
	    												+ " ) VALUES (?,?,?) returning id")
	      .setParameter(1, m.getId())
	      .setParameter(2, m.getMerchantId())
	      .setParameter(3, m.getEmailId())
	      //.executeUpdate();
	      .getSingleResult();
	}
	
}
