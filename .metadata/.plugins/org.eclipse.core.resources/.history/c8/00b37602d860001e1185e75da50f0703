package com.gme.hom.kyc.controllers;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.gme.hom.api.config.APIRequestFunctionCode;
import com.gme.hom.api.config.APIRequestScopeCode;
import com.gme.hom.api.config.APIResponseCode;
import com.gme.hom.api.models.APIRequest;
import com.gme.hom.api.models.APIResponse;
import com.gme.hom.common.services.ObjectToJson;
import com.gme.hom.kyc.bankDetails.model.MerchantsBankDetails;
import com.gme.hom.kyc.bankDetails.services.MerchantsBankDetailsService;
import com.gme.hom.kyc.codes.ResponseMessageCodes;
import com.gme.hom.kyc.directors.model.MerchantsDirectorsDetailsRequest;
import com.gme.hom.kyc.directors.services.MerchantsDirectorsDetailsService;
import com.gme.hom.kyc.merchants.model.Merchant;
import com.gme.hom.kyc.merchants.services.MerchantService;
import com.gme.hom.kyc.preferredServices.model.MerchantsServicePreferenceRequest;
import com.gme.hom.kyc.preferredServices.services.MerchantsServicePreferenceService;
import com.gme.hom.kyc.representatives.model.MerchantsRepresentativeDetails;
import com.gme.hom.kyc.representatives.model.MerchantsRepresentativeDetailsRequest;
import com.gme.hom.kyc.representatives.services.MerchantsRepresentativeDetailsService;
import com.gme.hom.kyc.services.KYCService;
import com.gme.hom.kyc.stockholders.model.MerchantsStockholdersDetails;
import com.gme.hom.kyc.stockholders.model.MerchantsStockholdersDetailsRequest;
import com.gme.hom.kyc.stockholders.services.MerchantsStockholdersDetailsService;
import com.gme.hom.users.services.UserService;

import lombok.AllArgsConstructor;

@Controller
@RequestMapping("/signup/kyc")
@AllArgsConstructor
public class KYCController {

	private UserService userService;
	private MerchantService merchantService;
	private MerchantsBankDetailsService bankDetailsService;
	private MerchantsDirectorsDetailsService directorsService;
	private MerchantsRepresentativeDetailsService representativeService;
	private MerchantsStockholdersDetailsService stockholdersService;
	private MerchantsServicePreferenceService servicePreferenceService;
	private KYCService kycService;

	@PostMapping("")
	public String onBoardMerchant(@RequestBody APIRequest apiReq) {
		APIResponse ar = new APIResponse();

		if (apiReq.getFunction().equals(APIRequestFunctionCode.ADD_DATA.toString())
				&& apiReq.getScope().equals(APIRequestScopeCode.SINGLE.toString())) {
			if (apiReq.getData().getQuery().getBy().equals(""))
				try {
					String message = kycService.onBoard(apiReq.getData());
					ar.setStatus(APIResponseCode.SUCCESS.toString());
					ar.setDescription(message);
				} catch (Exception e) {
					ar.setStatus(APIResponseCode.FAILURE.toString());
					ar.setDescription(e.getMessage());
				}
		} else {
			ar.setStatus(APIResponseCode.FAILURE.toString());
			ar.setDescription("Invalid function name!");
		}
		return ObjectToJson.toJson(ar);
	}

	@PatchMapping("/add_user_details")
	public String addUserDetails(@RequestBody APIRequest apiRequest) {
		APIResponse ar = new APIResponse();

		if (apiRequest.getFunction().equals(APIRequestFunctionCode.UPDATE_DATA.toString())
				&& apiRequest.getScope().equals(APIRequestScopeCode.SINGLE.toString())) {
			try {
				ar.setStatus(kycService.updateUserById(apiRequest.getData()));
				ar.setDescription("Updated Successfully.");

			} catch (Exception e) {
				ar.setStatus(APIResponseCode.FAILURE.toString());
				ar.setDescription(ResponseMessageCodes.UPDATE_FAILED.toString());
			}
		} else {
			ar.setStatus(APIResponseCode.FAILURE.toString());
			ar.setDescription(ResponseMessageCodes.UPDATE_FAILED.toString());
		}
		return ObjectToJson.toJson(ar);
	}

	@PatchMapping("/add_merchant_details")
	public String addMerchantDetails(@RequestBody APIRequest apiRequest) {
		APIResponse ar = new APIResponse();
		if (apiRequest.getFunction().equals(APIRequestFunctionCode.UPDATE_DATA)
				&& apiRequest.getScope().equals(APIRequestScopeCode.SINGLE.toString())) {
			if (apiRequest.getData().getQuery().getBy().equals("MERCHANT_ID")
					&& apiRequest.getData().getQuery().getValue() != null) {
				try {
					Merchant merchant = new Merchant(apiRequest.getData().getMerchantRequest());
					merchant.setId(Long.parseLong(apiRequest.getData().getQuery().getValue()));
					merchant = merchantService.update(merchant);
					ar.setStatus(APIResponseCode.SUCCESS.toString());
					ar.setDescription(ResponseMessageCodes.UPDATED_SUCCESSFULLY.toString());
				} catch (Exception e) {
					ar.setStatus(APIResponseCode.FAILURE.toString());
					ar.setDescription(ResponseMessageCodes.UPDATE_FAILED.toString());
				}
			} else {
				ar.setStatus(APIResponseCode.FAILURE.toString());
				ar.setDescription(ResponseMessageCodes.UPDATE_FAILED.toString());
			}

		} else {
			ar.setStatus(APIResponseCode.FAILURE.toString());
			ar.setDescription("Invalid function code or scope!");
		}
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addmerchantbankdetails/id")
	public String addBankDetails(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		MerchantsBankDetails bankDetails = new MerchantsBankDetails(
				apiRequest.getData().getMerchantsBankDetailsRequest());
		bankDetails = bankDetailsService.addMerchantBankDetails(apiRequest.getData().getMerchantsBankDetailsRequest(),
				merchantId);
		ar.setStatus(APIResponseCode.SUCCESS.toString());
		ar.setDescription("Data added!");
		// ar.setData(bankDetails.getId());
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addmerchantdirectorsdetails/id")
	public String addDirectorsDetails(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		List<MerchantsDirectorsDetailsRequest> directorsDetailsReqs = apiRequest.getData()
				.getMerchantsDirectorsDetailsRequests();
		for (MerchantsDirectorsDetailsRequest req : directorsDetailsReqs) {
			directorsService.addMerchantDirectorsDetails(req, merchantId);
		}
		ar.setStatus(APIResponseCode.SUCCESS.toString());
		ar.setDescription("Data added!");
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addmerchantrepresentativedetails/id")
	public String addRepresentativeDetails(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		List<MerchantsRepresentativeDetailsRequest> RepresentativesDetailsReqs = apiRequest.getData()
				.getMerchantsRepresentativeDetailsRequests();
		for (MerchantsRepresentativeDetailsRequest req : RepresentativesDetailsReqs) {
			MerchantsRepresentativeDetails merchant = new MerchantsRepresentativeDetails(req);
			representativeService.save(merchant);
		}
		ar.setStatus(APIResponseCode.SUCCESS.toString());
		ar.setDescription("Data added!");
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addmerchantstockholderdetails/id")
	public String addStockholdersDetails(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		try {
			List<MerchantsStockholdersDetailsRequest> stockholdersDetailsReqs = apiRequest.getData()
					.getMerchantsStockholdersDetailsRequests();
			for (MerchantsStockholdersDetailsRequest req : stockholdersDetailsReqs) {
				MerchantsStockholdersDetails stakeholder = new MerchantsStockholdersDetails(req);
				stockholdersService.save(stakeholder);
			}
			ar.setStatus(APIResponseCode.SUCCESS.toString());
			ar.setDescription("Data added!");
		}catch (Exception e) {
			ar.setStatus(APIResponseCode.FAILURE.toString());
			ar.setDescription(ResponseMessageCodes.CREATION_FAILED.toString());
		}
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addmakepaymantpreferences/id")
	public String addMakePaymantPreferences(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		List<MerchantsServicePreferenceRequest> servicePreferenceReqs = apiRequest.getData()
				.getMakePaymentInfoRequests();
		for (MerchantsServicePreferenceRequest req : servicePreferenceReqs) {
			servicePreferenceService.addServicePreferenceDetails(req, merchantId);
		}
		ar.setStatus(APIResponseCode.SUCCESS.toString());
		ar.setDescription("Data added!");
		return ObjectToJson.toJson(ar);
	}

	@PostMapping("/addgetpaymantpreferences/id")
	public String addGetPaymantPreferences(@RequestBody APIRequest apiRequest, @PathVariable Long merchantId) {
		APIResponse ar = new APIResponse();
		List<MerchantsServicePreferenceRequest> servicePreferenceReqs = apiRequest.getData()
				.getGetPaymentInfoRequests();
		for (MerchantsServicePreferenceRequest req : servicePreferenceReqs) {
			servicePreferenceService.addServicePreferenceDetails(req, merchantId);
		}
		ar.setStatus(APIResponseCode.SUCCESS.toString());
		ar.setDescription("Data added!");
		return ObjectToJson.toJson(ar);
	}

}
