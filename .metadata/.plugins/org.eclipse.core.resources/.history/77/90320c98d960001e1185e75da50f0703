package com.gme.hom.kyc.services;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.gme.hom.api.models.APIData;
import com.gme.hom.api.models.APIResponseCodes;
import com.gme.hom.kyc.bankDetails.model.MerchantsBankDetails;
import com.gme.hom.kyc.bankDetails.model.MerchantsBankDetailsRequest;
import com.gme.hom.kyc.bankDetails.services.MerchantsBankDetailsService;
import com.gme.hom.kyc.codes.MerchantStatusCodes;
import com.gme.hom.kyc.directors.model.MerchantsDirectorsDetails;
import com.gme.hom.kyc.directors.model.MerchantsDirectorsDetailsRequest;
import com.gme.hom.kyc.directors.services.MerchantsDirectorsDetailsService;
import com.gme.hom.kyc.merchants.model.Merchant;
import com.gme.hom.kyc.merchants.model.MerchantRequest;
import com.gme.hom.kyc.merchants.services.MerchantService;
import com.gme.hom.kyc.preferredServices.model.MerchantsServicePreference;
import com.gme.hom.kyc.preferredServices.model.MerchantsServicePreferenceRequest;
import com.gme.hom.kyc.preferredServices.services.MerchantsServicePreferenceService;
import com.gme.hom.kyc.representatives.model.MerchantsRepresentativeDetails;
import com.gme.hom.kyc.representatives.model.MerchantsRepresentativeDetailsRequest;
import com.gme.hom.kyc.representatives.services.MerchantsRepresentativeDetailsService;
import com.gme.hom.kyc.stockholders.model.MerchantsStockholdersDetails;
import com.gme.hom.kyc.stockholders.model.MerchantsStockholdersDetailsRequest;
import com.gme.hom.kyc.stockholders.services.MerchantsStockholdersDetailsService;
import com.gme.hom.users.models.User;
import com.gme.hom.users.models.UserRequest;
import com.gme.hom.users.services.UserService;

import jakarta.transaction.Transactional;
import lombok.AllArgsConstructor;
@Service
@AllArgsConstructor
public class KYCServiceImpl implements KYCService{
	private UserService userService;
	private MerchantService merchantService;
	private MerchantsBankDetailsService bankDetailsService;
	private MerchantsDirectorsDetailsService directorsService;
	private MerchantsRepresentativeDetailsService representativeService;
	private MerchantsStockholdersDetailsService stockholdersService;
	private MerchantsServicePreferenceService servicePreferenceService;
	
	@Override
	@Transactional
	public String onBoard(APIData data) throws Exception{
		if(data.getQuery().getBy().equals("MERCHANT_ID") && data.getQuery().getValue() != null) {
			Long merchantId = Long.parseLong(data.getQuery().getValue());
			//Unpacking data from APIRequest object
			UserRequest userReq = data.getUserRequest();
			MerchantRequest merchantReq = data.getMerchantRequest();
			MerchantsBankDetailsRequest bankDetailsReq = data.getMerchantsBankDetailsRequest();
			List<MerchantsDirectorsDetailsRequest> directorsReqs = data.getMerchantsDirectorsDetailsRequests();
			List<MerchantsRepresentativeDetailsRequest> representativesReqs = data.getMerchantsRepresentativeDetailsRequests();
			List<MerchantsStockholdersDetailsRequest> stockholdersReqs = data.getMerchantsStockholdersDetailsRequests();
			List<MerchantsServicePreferenceRequest> makePaymentServicePrefReq = data.getMakePaymentInfoRequests();
			List<MerchantsServicePreferenceRequest> getPaymentServicePrefReq = data.getGetPaymentInfoRequests();
			//update merchant details
			Optional<Merchant> m = merchantService.getById(merchantId);
			Merchant merchant = new Merchant(merchantReq);
			if(!m.isEmpty()) {
				merchant.setIncorporationCountry(userReq.getCountry());				
				
				
				
				//check if merchant matches the registration started earlier
				if(m.get().getEmailId().equals(merchant.getEmailId())) {
					merchant.setId(m.get().getId());
					merchant.setStatus(MerchantStatusCodes.PENDING.toString());
					merchant.setActive(true);
					merchantService.update(merchant);	
				}else {
					throw new Exception("Merchant email did not match!");					
				}
			}else {
				throw new Exception("No such merchant found!");
			}
			//update user details
			Optional<User> u = userService.getUserByMerchantId(merchantId);
			if(!u.isEmpty()) {
				User user = new User(userReq);
				if(user.getPhoneCode()==null) {
					user.setPhoneCode(merchant.getPhoneCode());
				}
				if(user.getPhoneNumber()==null) {
					user.setPhoneNumber(merchant.getPhoneNumber());
				}
				if(user.getAddress1()==null) {
					user.setAddress1(merchant.getAddress1());
				}
				if(user.getAddress2()==null) {
					user.setAddress2(merchant.getAddress2());
				}
				
				//check if user matches the registration started earlier
				if(u.get().getEmailId().equals(userReq.getEmailId())) {
					user.setId(u.get().getId());
					user.setStatus(MerchantStatusCodes.PENDING.toString());
					user.setActive(true);
					user.setMerchantId(m.get().getId());
					userService.update(user);
				}else {
					throw new Exception("User email did not match!");
				}
			}else {
				throw new Exception("No such user found!");
			}
			
			//insert merchant bank details request
			bankDetailsReq.setMerchantId(m.get().getId());
			MerchantsBankDetails bankDetails =  bankDetailsService.addMerchantBankDetails(bankDetailsReq, merchantId);
			//insert List of merchantDirectorsDetails
			for(MerchantsDirectorsDetailsRequest directorsReq : directorsReqs) {
				directorsReq.setMerchantId(m.get().getId());
				MerchantsDirectorsDetails directorsDetails = directorsService.addMerchantDirectorsDetails(directorsReq, merchantId);
			}
			//insert List of merchantRepresentativeDetails
			for(MerchantsRepresentativeDetailsRequest representativeReq : representativesReqs) {
				representativeReq.setMerchantId(m.get().getId());
				MerchantsRepresentativeDetails representativeDetails = representativeService.addMerchantRepresentativesDetails(representativeReq, merchantId);
			}
			//insert List of merchantStockholdersDetails
			for(MerchantsStockholdersDetailsRequest stockholdersReq : stockholdersReqs) {
				stockholdersReq.setMerchantId(m.get().getId());
				MerchantsStockholdersDetails stockholder = new MerchantsStockholdersDetails(stockholdersReq);
				MerchantsStockholdersDetails stockholdersDetails = stockholdersService.save(stockholder);
			}
			//insert List of make payment info to MerchantsServicePreferenceDetailsTable
			for(MerchantsServicePreferenceRequest servicePrefReq : makePaymentServicePrefReq) {
				servicePrefReq.setMerchantId(m.get().getId());
				MerchantsServicePreference servicePreference = servicePreferenceService.addServicePreferenceDetails(servicePrefReq, merchantId);
			}
			//insert List of get payment info to MerchantsServicePreferenceDetailsTable
			for(MerchantsServicePreferenceRequest servicePrefReq : getPaymentServicePrefReq) {
				servicePrefReq.setMerchantId(m.get().getId());
				MerchantsServicePreference servicePreference = servicePreferenceService.addServicePreferenceDetails(servicePrefReq, merchantId);
			}
		}else {
			throw new Exception("Insufficient information!");
		}
			
			
		return "Data saved to the database";
	}

//	@Override
//	public String updateUserById(APIData data) throws Exception {
//		if(data.getQuery().getBy().equals("USER_Id") && data.getQuery().getValue() !=null) {
//			UserRequest ur = data.getUserRequest();
//			Optional<User> userOpt = userService.getUserById(Long.parseLong(data.getQuery().getValue()));
//			if (!userOpt.isEmpty()) {
//				User user = userOpt.get();
//				user.setFirstName(ur.getFirstName());
//				user.setMiddleName(ur.getMiddleName());
//				user.setLastName(ur.getLastName());
//				user.setFullName(ur.getFirstName()+ ur.getMiddleName()==null && ur.getMiddleName().length()==0?" ":(" "+ur.getMiddleName()+" ")+ur.getLastName());
//				user.setDob(ur.getDob());
//				user.setCountry(ur.getCountry());
//				//ar.setData(merchant);
//			} else {
//				throw new Exception("Duplicate field email!");
//			}
//		}else{
//			throw new Exception("Insufficient information!");
//		}
//		return APIResponseCodes.SUCCESS;
//		
//	}
//	@Override
//	public String updateUserByMerchantId(APIData data) throws Exception {
//		if(data.getQuery().getBy().equals("MERCHANT_Id") && data.getQuery().getValue() !=null) {
//			UserRequest ur = data.getUserRequest();
//			Optional<User> userOpt = userService.getUserByMerchantId(Long.parseLong(data.getQuery().getValue()));
//			if (!userOpt.isEmpty()) {
//				User user = userOpt.get();
//				user.setFirstName(ur.getFirstName());
//				user.setMiddleName(ur.getMiddleName());
//				user.setLastName(ur.getLastName());
//				user.setFullName(ur.getFirstName()+ ur.getMiddleName()==null && ur.getMiddleName().length()==0?" ":(" "+ur.getMiddleName()+" ")+ur.getLastName());
//				user.setDob(ur.getDob());
//				user.setCountry(ur.getCountry());
//				//ar.setData(merchant);
//			} else {
//				throw new Exception("Duplicate field email!");
//			}
//		}else{
//			throw new Exception("Insufficient information!");
//		}
//		return APIResponseCodes.SUCCESS;
//		
//	}
}
